{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\239am\\\\Desktop\\\\mern\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport NoteContext from \"./NoteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const data = {\n    \"name\": \"amit\",\n    \"class\": \"5b\"\n  };\n  const [state, setState] = useState(data);\n  const update = () => {\n    setTimeout(() => {\n      setState({\n        \"name\": \"amit\",\n        \"class\": \"5b\"\n      });\n    }, 2000);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: s1,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n\n/*\r\n\r\nðŸ”¸ {props.children}\r\nThis means: \"whatever component I wrap inside <NoteState> ... </NoteState>\".\r\n\r\nThose wrapped components can now access the value (i.e., state) using useContext.\r\n\r\nðŸ”¶ NoteContext.Provider: What does it do?\r\nThink of NoteContext.Provider like a data pipe ðŸ§µ:\r\n\r\nYou put some data inside it using value={...}\r\n\r\nThen, any component wrapped inside it can use that data with useContext(NoteContext)\r\n\r\n\r\nâœ… Summary of File Responsibilities:\r\nFile\tResponsibility\r\nNoteContext.js\tCreates context (createContext())\r\nNoteState.js\tProvides state and wraps children using NoteContext.Provider\r\nAbout.js or any child\tConsumes the state using useContext(NoteContext)\r\n*/\n_s(NoteState, \"BesDbRegePIGgoZFDSl1jbsE5cA=\");\n_c = NoteState;\nexport default NoteState;\n\n/// these all will provide the notestate\n\n// make a function and jo v cheez provide krna chate ho usko context.provider k andar value me pass kr do\n\n// jab v context k andar wrap karoge uske bich me sare k sare children a jayenge\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","data","state","setState","update","setTimeout","Provider","value","s1","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/239am/Desktop/mern/src/context/notes/NoteState.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport NoteContext from \"./NoteContext\";\r\n\r\nconst NoteState = (props) => {\r\n    const data = {\r\n        \"name\": \"amit\",\r\n        \"class\": \"5b\"\r\n    }\r\n    const [state, setState] = useState(data);\r\n    const update = () => {\r\n        setTimeout(() => {\r\n            setState({\r\n                \"name\": \"amit\",\r\n                \"class\": \"5b\"\r\n            })\r\n        }, 2000)\r\n    }\r\n    return (\r\n        <NoteContext.Provider value={s1}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\n\r\n/*\r\n\r\nðŸ”¸ {props.children}\r\nThis means: \"whatever component I wrap inside <NoteState> ... </NoteState>\".\r\n\r\nThose wrapped components can now access the value (i.e., state) using useContext.\r\n\r\nðŸ”¶ NoteContext.Provider: What does it do?\r\nThink of NoteContext.Provider like a data pipe ðŸ§µ:\r\n\r\nYou put some data inside it using value={...}\r\n\r\nThen, any component wrapped inside it can use that data with useContext(NoteContext)\r\n\r\n\r\nâœ… Summary of File Responsibilities:\r\nFile\tResponsibility\r\nNoteContext.js\tCreates context (createContext())\r\nNoteState.js\tProvides state and wraps children using NoteContext.Provider\r\nAbout.js or any child\tConsumes the state using useContext(NoteContext)\r\n*/\r\nexport default NoteState;\r\n\r\n\r\n/// these all will provide the notestate\r\n\r\n// make a function and jo v cheez provide krna chate ho usko context.provider k andar value me pass kr do\r\n\r\n// jab v context k andar wrap karoge uske bich me sare k sare children a jayenge"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACzB,MAAMC,IAAI,GAAG;IACT,MAAM,EAAE,MAAM;IACd,OAAO,EAAE;EACb,CAAC;EACD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACO,IAAI,CAAC;EACxC,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACjBC,UAAU,CAAC,MAAM;MACbF,QAAQ,CAAC;QACL,MAAM,EAAE,MAAM;QACd,OAAO,EAAE;MACb,CAAC,CAAC;IACN,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC;EACD,oBACIN,OAAA,CAACF,WAAW,CAACW,QAAQ;IAACC,KAAK,EAAEC,EAAG;IAAAC,QAAA,EAC3BV,KAAK,CAACU;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBAb,EAAA,CArBMF,SAAS;AAAAgB,EAAA,GAAThB,SAAS;AA0Cf,eAAeA,SAAS;;AAGxB;;AAEA;;AAEA;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}