{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\239am\\\\Desktop\\\\mern\\\\src\\\\context\\\\notes\\\\NoteState.js\";\nimport React, { useState } from \"react\";\nimport NoteContext from \"./NoteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  const data = {};\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      state,\n      update\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n/*\r\n\r\nðŸ”¸ {props.children}\r\nThis means: \"whatever component I wrap inside <NoteState> ... </NoteState>\".\r\n\r\nThose wrapped components can now access the value (i.e., state) using useContext.\r\n\r\nðŸ”¶ NoteContext.Provider: What does it do?\r\nThink of NoteContext.Provider like a data pipe ðŸ§µ:\r\n\r\nYou put some data inside it using value={...}\r\n\r\nThen, any component wrapped inside it can use that data with useContext(NoteContext)\r\n\r\n\r\nâœ… Summary of File Responsibilities:\r\nFile\tResponsibility\r\nNoteContext.js\tCreates context (createContext())\r\nNoteState.js\tProvides state and wraps children using NoteContext.Provider\r\nAbout.js or any child\tConsumes the state using useContext(NoteContext)\r\n*/\n_c = NoteState;\nexport default NoteState;\n\n/// these all will provide the notestate\n\n// make a function and jo v cheez provide krna chate ho usko context.provider k andar value me pass kr do\n\n// jab v context k andar wrap karoge uske bich me sare k sare children a jayenge\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","data","Provider","value","state","update","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/239am/Desktop/mern/src/context/notes/NoteState.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport NoteContext from \"./NoteContext\";\r\n\r\nconst NoteState = (props) => {\r\n    const data = {\r\n      \r\n    }\r\n    return (\r\n        <NoteContext.Provider value={{state , update}}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\n\r\n/*\r\n\r\nðŸ”¸ {props.children}\r\nThis means: \"whatever component I wrap inside <NoteState> ... </NoteState>\".\r\n\r\nThose wrapped components can now access the value (i.e., state) using useContext.\r\n\r\nðŸ”¶ NoteContext.Provider: What does it do?\r\nThink of NoteContext.Provider like a data pipe ðŸ§µ:\r\n\r\nYou put some data inside it using value={...}\r\n\r\nThen, any component wrapped inside it can use that data with useContext(NoteContext)\r\n\r\n\r\nâœ… Summary of File Responsibilities:\r\nFile\tResponsibility\r\nNoteContext.js\tCreates context (createContext())\r\nNoteState.js\tProvides state and wraps children using NoteContext.Provider\r\nAbout.js or any child\tConsumes the state using useContext(NoteContext)\r\n*/\r\nexport default NoteState;\r\n\r\n\r\n/// these all will provide the notestate\r\n\r\n// make a function and jo v cheez provide krna chate ho usko context.provider k andar value me pass kr do\r\n\r\n// jab v context k andar wrap karoge uske bich me sare k sare children a jayenge"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAIC,KAAK,IAAK;EACzB,MAAMC,IAAI,GAAG,CAEb,CAAC;EACD,oBACIH,OAAA,CAACF,WAAW,CAACM,QAAQ;IAACC,KAAK,EAAE;MAACC,KAAK;MAAGC;IAAM,CAAE;IAAAC,QAAA,EACzCN,KAAK,CAACM;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBAC,EAAA,GAXMZ,SAAS;AAgCf,eAAeA,SAAS;;AAGxB;;AAEA;;AAEA;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}